name: Docker Build and Push (GHCR)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  deploy:
    name: Deploy with deploy-rs
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    env:
      NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
      NIX_SSH_USER: ${{ secrets.NIX_SSH_USER }}
      NIX_SSH_KEY: ${{ secrets.NIX_SSH_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.NIX_SSH_KEY }}

      - name: Add server to known_hosts
        if: ${{ env.NIX_SSH_HOST != '' }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$NIX_SSH_HOST" >> ~/.ssh/known_hosts

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run deploy-rs (aarch64-linux)
        env:
          # Ensure deploy-rs app from flake is evaluated for the ARM system
          NIX_CONFIG: accept-flake-config = true
        run: |
          set -euo pipefail
          if [ -z "${NIX_SSH_HOST:-}" ] || [ -z "${NIX_SSH_USER:-}" ]; then
            echo "NIX_SSH_HOST and NIX_SSH_USER secrets must be set" >&2
            exit 1
          fi
          TARGET="${NIX_SSH_USER}@${NIX_SSH_HOST}"
          nix run .#deploy -- "$TARGET"
